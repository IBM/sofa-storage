// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package dpu

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StorageClient is the client API for Storage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StorageClient interface {
	DPUPublishVolume(ctx context.Context, in *DPUPublishVolumeRequest, opts ...grpc.CallOption) (*DPUPublishVolumeResponse, error)
	DPUUnpublishVolume(ctx context.Context, in *DPUUnpublishVolumeRequest, opts ...grpc.CallOption) (*DPUUnpublishVolumeResponse, error)
	DPUGetInfo(ctx context.Context, in *DPUGetInfoRequest, opts ...grpc.CallOption) (*DPUGetInfoResponse, error)
	DPUCreateController(ctx context.Context, in *DPUCreateControllerRequest, opts ...grpc.CallOption) (*DPUCreateControllerResponse, error)
	DPUDeleteController(ctx context.Context, in *DPUDeleteControllerRequest, opts ...grpc.CallOption) (*DPUDeleteControllerResponse, error)
}

type storageClient struct {
	cc grpc.ClientConnInterface
}

func NewStorageClient(cc grpc.ClientConnInterface) StorageClient {
	return &storageClient{cc}
}

func (c *storageClient) DPUPublishVolume(ctx context.Context, in *DPUPublishVolumeRequest, opts ...grpc.CallOption) (*DPUPublishVolumeResponse, error) {
	out := new(DPUPublishVolumeResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/DPUPublishVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) DPUUnpublishVolume(ctx context.Context, in *DPUUnpublishVolumeRequest, opts ...grpc.CallOption) (*DPUUnpublishVolumeResponse, error) {
	out := new(DPUUnpublishVolumeResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/DPUUnpublishVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) DPUGetInfo(ctx context.Context, in *DPUGetInfoRequest, opts ...grpc.CallOption) (*DPUGetInfoResponse, error) {
	out := new(DPUGetInfoResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/DPUGetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) DPUCreateController(ctx context.Context, in *DPUCreateControllerRequest, opts ...grpc.CallOption) (*DPUCreateControllerResponse, error) {
	out := new(DPUCreateControllerResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/DPUCreateController", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) DPUDeleteController(ctx context.Context, in *DPUDeleteControllerRequest, opts ...grpc.CallOption) (*DPUDeleteControllerResponse, error) {
	out := new(DPUDeleteControllerResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/DPUDeleteController", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StorageServer is the server API for Storage service.
// All implementations must embed UnimplementedStorageServer
// for forward compatibility
type StorageServer interface {
	DPUPublishVolume(context.Context, *DPUPublishVolumeRequest) (*DPUPublishVolumeResponse, error)
	DPUUnpublishVolume(context.Context, *DPUUnpublishVolumeRequest) (*DPUUnpublishVolumeResponse, error)
	DPUGetInfo(context.Context, *DPUGetInfoRequest) (*DPUGetInfoResponse, error)
	DPUCreateController(context.Context, *DPUCreateControllerRequest) (*DPUCreateControllerResponse, error)
	DPUDeleteController(context.Context, *DPUDeleteControllerRequest) (*DPUDeleteControllerResponse, error)
	mustEmbedUnimplementedStorageServer()
}

// UnimplementedStorageServer must be embedded to have forward compatible implementations.
type UnimplementedStorageServer struct {
}

func (UnimplementedStorageServer) DPUPublishVolume(context.Context, *DPUPublishVolumeRequest) (*DPUPublishVolumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DPUPublishVolume not implemented")
}
func (UnimplementedStorageServer) DPUUnpublishVolume(context.Context, *DPUUnpublishVolumeRequest) (*DPUUnpublishVolumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DPUUnpublishVolume not implemented")
}
func (UnimplementedStorageServer) DPUGetInfo(context.Context, *DPUGetInfoRequest) (*DPUGetInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DPUGetInfo not implemented")
}
func (UnimplementedStorageServer) DPUCreateController(context.Context, *DPUCreateControllerRequest) (*DPUCreateControllerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DPUCreateController not implemented")
}
func (UnimplementedStorageServer) DPUDeleteController(context.Context, *DPUDeleteControllerRequest) (*DPUDeleteControllerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DPUDeleteController not implemented")
}
func (UnimplementedStorageServer) mustEmbedUnimplementedStorageServer() {}

// UnsafeStorageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StorageServer will
// result in compilation errors.
type UnsafeStorageServer interface {
	mustEmbedUnimplementedStorageServer()
}

func RegisterStorageServer(s grpc.ServiceRegistrar, srv StorageServer) {
	s.RegisterService(&Storage_ServiceDesc, srv)
}

func _Storage_DPUPublishVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DPUPublishVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).DPUPublishVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/DPUPublishVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).DPUPublishVolume(ctx, req.(*DPUPublishVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_DPUUnpublishVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DPUUnpublishVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).DPUUnpublishVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/DPUUnpublishVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).DPUUnpublishVolume(ctx, req.(*DPUUnpublishVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_DPUGetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DPUGetInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).DPUGetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/DPUGetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).DPUGetInfo(ctx, req.(*DPUGetInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_DPUCreateController_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DPUCreateControllerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).DPUCreateController(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/DPUCreateController",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).DPUCreateController(ctx, req.(*DPUCreateControllerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_DPUDeleteController_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DPUDeleteControllerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).DPUDeleteController(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/DPUDeleteController",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).DPUDeleteController(ctx, req.(*DPUDeleteControllerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Storage_ServiceDesc is the grpc.ServiceDesc for Storage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Storage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "storage.Storage",
	HandlerType: (*StorageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DPUPublishVolume",
			Handler:    _Storage_DPUPublishVolume_Handler,
		},
		{
			MethodName: "DPUUnpublishVolume",
			Handler:    _Storage_DPUUnpublishVolume_Handler,
		},
		{
			MethodName: "DPUGetInfo",
			Handler:    _Storage_DPUGetInfo_Handler,
		},
		{
			MethodName: "DPUCreateController",
			Handler:    _Storage_DPUCreateController_Handler,
		},
		{
			MethodName: "DPUDeleteController",
			Handler:    _Storage_DPUDeleteController_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "storage.proto",
}
