// Copyright (c) 2021 International Business Machines
// All rights reserved.
// SPDX-License-Identifier: Apache-2.0
syntax = "proto3";

package storage_ctrl;


/**
*
*/
service Ctrl {
    rpc CTRLCreateVolume (CTRLCreateVolumeRequest)
        returns (CTRLCreateVolumeResponse) {}

    rpc CTRLDeleteVolume (CTRLDeleteVolumeRequest)
        returns (CTRLDeleteVolumeResponse) {}

    rpc CTRLAttachVolume (CTRLAttachVolumeRequest)
        returns (CTRLAttachVolumeResponse) {}

    rpc CTRLDetachVolume (CTRLDetachVolumeRequest)
        returns (CTRLDetachVolumeResponse) {}

    rpc CTRLListVolumes (CTRLListVolumesRequest)
        returns (CTRLListVolumesResponse) {}

    rpc CTRLCreateController (CTRLCreateControllerRequest)
        returns (CTRLCreateControllerResponse) {}

    rpc CTRLDeleteController (CTRLDeleteControllerRequest)
        returns (CTRLDeleteControllerResponse) {}
}


/**
*
*/
message CTRLCreateVolumeRequest {
    string name = 1;           // 1. unique identifier 2. suggested name of volume
    uint64 capacity_bytes = 2; // Capacity of the volume in bytes (CSI defines min and max for request?)
    VolumeContentSource volume_content_source = 3;
}

/**
*
*/
message VolumeContentSource {
    message SnapshotSource {
        // Contains identity information for the existing source snapshot.
        // This field is REQUIRED. Plugin is REQUIRED to support creating
        // volume from snapshot if it supports the capability
        // CREATE_DELETE_SNAPSHOT.
        string snapshot_id = 1;
    }

    message VolumeSource {
        // Contains identity information for the existing source volume.
        // This field is REQUIRED. Plugins reporting CLONE_VOLUME
        // capability MUST support creating a volume from another volume.
        string volume_id = 1;
    }

    oneof type {
        SnapshotSource snapshot = 1;
        VolumeSource volume = 2;
    }
}

/**
*
*/
message CTRLCreateVolumeResponse {
    Volume volume = 1;
}

/**
*
*/
message CTRLDeleteVolumeRequest {
    string volume_id = 1;            // REQUIRED: ID of the volume to be deleted
    map<string, string> secrets = 2; // OPTIONAL: secrets required to complete request
}

/**
*
*/
message CTRLDeleteVolumeResponse {
}

/**
*
*/
message CTRLAttachVolumeRequest {
    string volume_id = 1;
    string controller_id = 2;
    string node_id = 3;
    string network = 4;
    string target_path = 5;
    map<string, string> secrets = 6; // OPTIONAL: secrets required to complete request
}

/**
*
*/
message CTRLAttachVolumeResponse {
}

/**
*
*/
message CTRLDetachVolumeRequest {
    string volume_id = 1;
    string node_id = 2;
    string target_path = 3;
}

/**
*
*/
message CTRLDetachVolumeResponse {
}

/**
*
*/
message CTRLListVolumesRequest {
    int32 max_entries = 1;
    string vsi_id = 2;
}

/**
*
*/
message CTRLListVolumesResponse {
    message Entry {
        Volume volume = 1;
    }
    repeated Entry entries = 1; 
}

/**
*
*/
message Volume {
    int64 capacity_bytes = 1;
    string volume_id = 2;
    map<string, string> volume_context = 3;
}

/**
*
*/
message CTRLCreateControllerRequest {
    string subsystem_nqn = 1; 
    string node_id = 2;
    optional int64 pf_index = 3; //optional
    optional int64 vf_index = 4; //optional
    optional string serial_number = 5; //optional
    optional string model_number = 6; //optional
}

/**
*
*/
message CTRLCreateControllerResponse {
    string controller_id = 1;
}

/**
*
*/
message CTRLDeleteControllerRequest {
    string controller_id = 1;
    string node_id = 2;
}

/**
*
*/
message CTRLDeleteControllerResponse {
}